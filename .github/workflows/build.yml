name: Build Box64 (aarch64)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # 每5分钟检测一次上游是否有更新（相当于源码更新即刻构建）

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

env:
  SRC_REPO: https://github.com/ptitSeb/box64
  LAST_COMMIT_FILE: last_box64_commit.txt

jobs:
  build:
    runs-on: ubuntu-24.04-arm

    steps:
      # 🔹 检出当前仓库（存储 last commit 文件）
      - name: 检出仓库
        uses: actions/checkout@v4

      # 🔹 安装依赖
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential gcc git patchelf jq curl unzip

      # 🔹 获取 Box64 最新提交与标签
      - name: 获取 Box64 最新提交与标签
        id: get_latest
        run: |
          set -e
          echo "📡 检查上游仓库: $SRC_REPO"
          LATEST_COMMIT=$(git ls-remote $SRC_REPO HEAD | awk '{print $1}')
          LATEST_TAG=$(git ls-remote --tags $SRC_REPO | awk '{print $2}' | sed 's|refs/tags/||' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "❌ 未获取到标签，使用 commit 缩写作为版本"
            LATEST_TAG=${LATEST_COMMIT:0:7}
          fi
          echo "✅ 最新标签: $LATEST_TAG"
          echo "✅ 最新提交: $LATEST_COMMIT"
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          curl -s "https://api.github.com/repos/ptitSeb/box64/commits/$LATEST_COMMIT" -o commit.json
          COMMIT_DATE=$(jq -r '.commit.author.date' commit.json)
          COMMIT_AUTHOR=$(jq -r '.commit.author.name' commit.json)
          echo "commit_date=$COMMIT_DATE" >> $GITHUB_ENV
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_ENV

      # 🔹 获取上次构建提交
      - name: 获取上次构建提交
        id: get_last
        run: |
          if [ -f "${{ env.LAST_COMMIT_FILE }}" ]; then
            LAST_COMMIT=$(cat "${{ env.LAST_COMMIT_FILE }}")
            echo "上次构建提交: $LAST_COMMIT"
          else
            LAST_COMMIT="none"
            echo "未找到上次构建记录"
          fi
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV

      # 🔹 判断是否需要构建
      - name: 检查是否需要构建
        id: check_build
        run: |
          if [ "$LATEST_COMMIT" = "$LAST_COMMIT" ]; then
            echo "✅ 无新提交，跳过构建"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "🟢 发现新提交或标签变化，准备构建..."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      # 🔹 跳过无更新构建
      - name: 跳过无更新构建
        if: steps.check_build.outputs.skip_build == 'true'
        run: |
          echo "✅ 无新提交，跳过构建"
          exit 0

      # 🔹 克隆 Box64 并构建
      - name: 克隆 Box64 并构建
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          git clone --depth=1 $SRC_REPO
          cd box64
          mkdir build && cd build
          cmake .. \
            -DARM_DYNAREC=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DWINLATOR_GLIBC=ON \
            -DARM64=ON \
            -DBAD_SIGN=ON \
            -DSD8G2=ON
          make -j$(nproc)
          echo "✅ 构建完成"
          # 修复动态链接器路径（Termux glibc）
          patchelf --set-interpreter /data/data/com.termux/files/usr/glibc/lib/ld-linux-aarch64.so.1 box64 || true
          # 打包
          TAR_FILE="termux-glibc-box64-${LATEST_TAG}.tar.gz"
          tar -czvf ../../$TAR_FILE box64
          echo "$LATEST_COMMIT" > ../../${{ env.LAST_COMMIT_FILE}}
          echo "TAR_FILE=$TAR_FILE" >> $GITHUB_ENV
          echo "VERSION=$LATEST_TAG" >> $GITHUB_ENV

      # 🔹 上传构建产物
      - name: 上传构建产物
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: termux-glibc-box64-${{ env.VERSION }}
          path: ${{ env.TAR_FILE }}

      # 🔹 保存 last commit 文件（不推送仓库，只保留 artifact）
      - name: 保存 last commit 文件
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: last-box64-commit
          path: ${{ env.LAST_COMMIT_FILE }}

      # 🔹 发布 Release
      - name: 发布到 GitHub Release
        if: steps.check_build.outputs.skip_build == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: box64-${{ env.VERSION }}
          name: Box64 ${{ env.VERSION }} (aarch64, Termux glibc)
          body: |
            ✅ **Box64 自动构建成功！**
            - 标签: `${{ env.VERSION }}`
            - 提交哈希: `${{ env.LATEST_COMMIT }}`
            - 作者: `${{ env.commit_author }}`
            - 提交时间: `${{ env.commit_date }}`
          files: ${{ env.TAR_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
